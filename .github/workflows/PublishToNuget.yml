name: NuGet Generation

on:
  push:
    branches: [ master ]
  pull_request:
    types: [closed]
    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

jobs:
  build_netcore:
    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        dotnet-version: ['2.1.x', '3.1.x', '5.0.x' ]
        
    steps:
    - uses: actions/checkout@v2
    
#    - name: Setup dotnet ${{ matrix.dotnet-version }}
#      uses: actions/setup-dotnet@v1
#      with:
#        dotnet-version: ${{ matrix.dotnet-version }}
          
    - name: Setup .NET Core 2.1	
      uses: actions/setup-dotnet@v1	
      with:	
        dotnet-version: 2.1.x	
    
    - name: Setup .NET Core 3.1	
      uses: actions/setup-dotnet@v1	
      with:	
        dotnet-version: 3.1.x
    
    - name: Setup .NET Core 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Start Databases
      run: |
        cd Docker
        docker-compose up -d 
        cd ..
        
    - name: Install dependencies
      run: dotnet restore DapperExtensions
      
    - name: Build
      run: dotnet build DapperExtensions --configuration Release --no-restore
      
    - name: Test Netcore 2.1
      run: 	dotnet test ./DapperExtensions.Test -c debug --collect:"XPlat Code Coverage" -verbosity:diagnostic -bl:msbuild.binlog -noconsolelogger --framework:netcoreapp2.1 --settings:coverlet.runsettings
      
    - name: Coverage Report Netcore 2.1
      run: reportgenerator "-reports:./**/coverage.cobertura.xml" "-targetdir:./CoverageReports/netcore21" -reporttypes:Html

    - name: Upload dotnet test results netcore 2.1
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-2.1
        path: ./CoverageReports/netcore21
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
      
    - name: Remove Coverage files netcore 2.1
      run: find . -name '*cobertura.xml' -delete
      
    - name: Test Netcore 3.1
      run: 	dotnet test ./DapperExtensions.Test -c debug --collect:"XPlat Code Coverage" -verbosity:diagnostic -bl:msbuild.binlog -noconsolelogger --framework:netcoreapp3.1 --settings:coverlet.runsettings
      
    - name: Coverage Report Netcore 3.1
      run: reportgenerator "-reports:./**/coverage.cobertura.xml" "-targetdir:./CoverageReports/netcore31" -reporttypes:Html

    - name: Upload dotnet test results netcore 3.1
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-3.1
        path: ./CoverageReports/netcore31
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
      
    - name: Remove Coverage files netcore 3.1
      run: find . -name '*cobertura.xml' -delete
      
    - name: Test Net 5
      run: 	dotnet test ./DapperExtensions.Test -c debug --collect:"XPlat Code Coverage" -verbosity:diagnostic -bl:msbuild.binlog -noconsolelogger --framework:net5.0 --settings:coverlet.runsettings
      
    - name: Coverage Report Net 5.0
      run: reportgenerator "-reports:./**/coverage.cobertura.xml" "-targetdir:./CoverageReports/net50" -reporttypes:Html

    - name: Upload dotnet test results net 5.0
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-50
        path: ./CoverageReports/netcore50
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}    
      
    - name: Remove Coverage files net 5.0
      run: find . -name '*cobertura.xml' -delete
      
  build_fullframework:
    if: always()
    needs: [build_netcore]
    runs-on: windows-latest
        
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup dotnet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
          
    - name: Install dependencies
      run: dotnet restore DapperExtensions
      
    - name: Build
      run: dotnet build DapperExtensions --configuration Release --no-restore
      
    - name: Test
      run: dotnet test .\DapperExtensions.Test -c debug --collect:"Code Coverage" -verbosity:diagnostic -bl:msbuild.binlog -noconsolelogger --framework:net461 --settings:mscoverage.runsettings
      
    - name: Coverage Report Net 4.6.1
      run: |
        $filepath="$env:userprofile\.nuget\packages\microsoft.codecoverage\16.9.4\build\netstandard1.0\CodeCoverage\CodeCoverage.exe"
        foreach ($f in Get-ChildItem -Path . -Filter "*.coverage" -Recurse){ 
          $outpath=Split-Path -Path $f.Directory -Resolve -NoQualifier
          $arguments="analyze /output:$outpath\net461.coveragexml $f"
          Start-Process -FilePath $filepath -ArgumentList $arguments -NoNewWindow -Wait -WorkingDirectory:.
        }
        foreach ($f in Get-ChildItem -Path . -Filter "net461.coveragexml" -Recurse){ 
          reportgenerator "-reports:$f" "-targetdir:.\CoverageReports\net461" -reporttypes:Html
        }
        
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v2
      with:
        name: dotnet-results-4.6.1
        path: ./CoverageReports/net461
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
      
    - name: Remove Coverage files net 5.0
      run: Get-ChildItem -Path . -Filter "net461.coveragexml" -Recurse | Remove-Item -force -recurse
      
  publish:
    runs-on: windows-latest
    if: always()
    needs: [build_netcore, build_fullframework]
    env:
        NUGET_AUTH_TOKEN: ${{secrets.NUGET_API_KEY}}
       
    steps:
    - uses: actions/checkout@v2
          
    - name: Setup .NET Core 2.1	
      uses: actions/setup-dotnet@v1	
      with:	
        dotnet-version: 2.1.x	
    
    - name: Setup .NET Core 3.1	
      uses: actions/setup-dotnet@v1	
      with:	
        dotnet-version: 3.1.x
    
    - name: Setup .NET Core 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Install dependencies
      run: dotnet restore DapperExtensions
      
    - name: Build
      run: dotnet build DapperExtensions --configuration Release --no-restore
      
#    - name: Publish
#      uses: brandedoutcast/publish-nuget@v2.5.2
#      with:
#          PROJECT_FILE_PATH: MintPlayer.SeasonChecker/MintPlayer.SeasonChecker.csproj
#          NUGET_KEY: ${{secrets.PUBLISH_TO_NUGET_ORG}}
#          INCLUDE_SYMBOLS: true

    - name: Pack Default Version
      run: dotnet pack --no-build --configuration Release ./DapperExtensions/DapperExtensions.csproj --output .
      
    - name: Upload Artifact for Default Version
      uses: actions/upload-artifact@v1.0.0
      with:
        name: nuget_package
        path: bin\Release\*.nupkg

    - name: Pack Signed Version
      run: dotnet pack --no-build --configuration Release ./DapperExtensions.StrongName/DapperExtensions.StrongName.csproj --output .
      
    - name: Upload Artifact for Signed Version
      uses: actions/upload-artifact@v1.0.0
      with:
        name: nuget_signed_package
        path: bin\Release\*.nupkg

#   - name: PushNuget
#      run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate
#      run: dotnet nuget push *.nupkg

